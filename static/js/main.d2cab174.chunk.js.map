{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","zipcode","city","event","target","value","zipCodeMap","this","setState","className","Form","Row","Group","controlId","Label","Control","placeholder","as","Col","onChange","handleZipCodeChange","bind","handleCityChange","handleStateChange","Button","variant","type","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wVAqFeA,E,kDA7Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,QAAS,GACTD,MAAO,GACPE,KAAM,IALS,E,gEASEC,GACnB,IAAMF,EAAUE,EAAMC,OAAOC,MAG7B,GAAIC,EAAWL,GAAU,CACvB,IAAMC,EAAOI,EAAWL,GAASC,KAC3BF,EAAQM,EAAWL,GAASD,MAClCO,KAAKC,SAAS,CAAEP,QAASA,EAASC,KAAMA,EAAMF,MAAOA,SAErDO,KAAKC,SAAS,CAAEP,QAASA,M,uCAIXE,GAChBI,KAAKC,SAAS,CAAEN,KAAMC,EAAMC,OAAOC,U,wCAGlBF,GACjBI,KAAKC,SAAS,CAAER,MAAOG,EAAMC,OAAOC,U,+BAIpC,OACE,yBAAKI,UAAU,OACb,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,IAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,CAAYC,UAAU,oBACpB,kBAACH,EAAA,EAAKI,MAAN,gBACA,kBAACJ,EAAA,EAAKK,QAAN,CAAcC,YAAY,mBAI9B,kBAACN,EAAA,EAAKC,IAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,CAAYC,UAAU,oBACpB,kBAACH,EAAA,EAAKI,MAAN,kBACA,kBAACJ,EAAA,EAAKK,QAAN,CAAcC,YAAY,kCAG9B,kBAACN,EAAA,EAAKC,IAAN,KACA,kBAACD,EAAA,EAAKE,MAAN,CAAYK,GAAIC,IAAKL,UAAU,eAC3B,kBAACH,EAAA,EAAKI,MAAN,YACA,kBAACJ,EAAA,EAAKK,QAAN,CAAcI,SAAUZ,KAAKa,oBAAoBC,KAAKd,MAAOF,MAAOE,KAAKP,MAAMC,YAInF,kBAACS,EAAA,EAAKC,IAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,CAAYK,GAAIC,IAAKL,UAAU,gBAC7B,kBAACH,EAAA,EAAKI,MAAN,aACA,kBAACJ,EAAA,EAAKK,QAAN,CAAcV,MAAOE,KAAKP,MAAME,KAAMiB,SAAUZ,KAAKe,iBAAiBD,KAAKd,SAG7E,kBAACG,EAAA,EAAKE,MAAN,CAAYK,GAAIC,IAAKL,UAAU,iBAC7B,kBAACH,EAAA,EAAKI,MAAN,cACA,kBAACJ,EAAA,EAAKK,QAAN,CAAcI,SAAUZ,KAAKgB,kBAAkBF,KAAKd,MAAOF,MAAOE,KAAKP,MAAMA,UAIjF,kBAACU,EAAA,EAAKC,IAAN,KACE,kBAACa,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,UAA/B,iB,GArEMC,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d2cab174.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {Form, Col, Button} from 'react-bootstrap'\nimport zipCodeMap from './zip_code_database.json'\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      zipcode: '',\n      state: '',\n      city: ''\n    }\n  }\n\n  handleZipCodeChange (event) {\n    const zipcode = event.target.value\n    \n    \n    if (zipCodeMap[zipcode]) {\n      const city = zipCodeMap[zipcode].city\n      const state = zipCodeMap[zipcode].state\n      this.setState({ zipcode: zipcode, city: city, state: state })\n    } else {\n      this.setState({ zipcode: zipcode })\n    }\n  }\n\n  handleCityChange (event) {\n    this.setState({ city: event.target.value})\n  }\n\n  handleStateChange (event) {\n    this.setState({ state: event.target.value})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form>\n          <Form.Row>\n            <Form.Group controlId=\"formGridAddress1\">\n              <Form.Label>Address</Form.Label>\n              <Form.Control placeholder=\"1234 Main St\" />\n            </Form.Group>\n          </Form.Row>\n          \n          <Form.Row>\n            <Form.Group controlId=\"formGridAddress2\">\n              <Form.Label>Address 2</Form.Label>\n              <Form.Control placeholder=\"Apartment, studio, or floor\" />\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n          <Form.Group as={Col} controlId=\"formGridZip\">\n              <Form.Label>Zip</Form.Label>\n              <Form.Control onChange={this.handleZipCodeChange.bind(this)} value={this.state.zipcode}/>\n            </Form.Group>\n          </Form.Row>\n  \n          <Form.Row>\n            <Form.Group as={Col} controlId=\"formGridCity\">\n              <Form.Label>City</Form.Label>\n              <Form.Control value={this.state.city} onChange={this.handleCityChange.bind(this)}/>\n            </Form.Group>\n  \n            <Form.Group as={Col} controlId=\"formGridState\">\n              <Form.Label>State</Form.Label>\n              <Form.Control onChange={this.handleStateChange.bind(this)} value={this.state.state}/>\n            </Form.Group>\n          </Form.Row>\n  \n          <Form.Row>\n            <Button variant=\"primary\" type=\"submit\">\n              Submit\n            </Button>\n          </Form.Row>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}